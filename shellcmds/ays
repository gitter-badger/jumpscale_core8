#!/usr/bin/env jspython8

from JumpScale import j

import click





@click.group()
@click.option('--nodebug', default=False, help='disable debug mode', is_flag=True)
def cli(nodebug):
    j.atyourservice.debug = not nodebug

@click.command()
@click.argument('role')
@click.argument('instance')
@click.option('--count', default=1, help='number of instances you want to create, default is 1')
@click.option('--domain', default="", help='optional domain of ays')
@click.option('--version', default="", help='optional version of ays')
def new(role,instance,count=1,domain="",version=""):
    """
    @arg role: name of role of instance you want to create
    @arg instance: the name for the instance
    """
    from ptpython.repl import embed
    print ("DEBUG NOW new")
    embed(globals(), locals())

    click.echo('new')

@click.command()
def init():
    """
    as first step this command will look for blueprints (they are in your ays repo under path $aysdir/blueprints)
    they will be processed in sorted order
    the blueprints will be converted to ays instances
    the changes with before (last time you did an init) will be shown
    """
    j.atyourservice.init()

    #@question why do we need this (despiegk)
    # path = j.sal.fs.joinPaths(j.dirs.varDir, 'servicetrees', '%s.json' % j.sal.fs.getcwd().replace('/', '__'))
    # j.sal.fs.touch(path)
    # servicestree = j.atyourservice.servicesTree
    # j.data.serializer.json.dump(path, servicestree)

    # chfiles.sort()
    # for item in chfiles:
    #     print ("- %s"%item)

#@click.command()
#@click.argument('servicekey')
#@click.command()
#def build(servicekey):
#    """
#    builds specific service
#    """
#    j.atyourservice.get(servicekey)

@click.command()
def showactions():
    """
    shows all services with relevant actions
    """
    j.atyourservice.alog
    for key,service in j.atyourservice.services.items():
        print ("%s"%service)
        for key,action in service.actions.items():
            print ("- %-20s %s"%(key,action))


@click.command()
@click.option('--printonly', default=False, is_flag=True, help='if set will not really execute, only show what would have been done')
@click.option('--all', default=False, is_flag=True, help='don\'t look for changed services, execute on all')
@click.option('--ask', default=False, is_flag=True, help='ask on which service to execute the action')
def apply(printonly=False, all=False, ask=False):
    """
    """
    allservices = all
    j.atyourservice.apply(printonly=printonly)


@click.command()
@click.argument('action')
@click.option('--printonly', default=False,  is_flag=True,help='if set will not really execute, only show what would have been done')
@click.option('--all', default=False,  is_flag=True,help='don\'t look for changed services, execute on all')
@click.option('--ask', default=False,  is_flag=True,help='ask on which service to execute the action')
def do(action,printonly=False,all=False, ask=False):
    """
    call an action
    """
    allservices=all
    j.atyourservice.do(action,printonly=printonly,allservices=allservices, ask=ask)

@click.command()
@click.argument('action')
@click.option('--changesonly', default=False,  is_flag=True,help='only execute on ays with changes since last time')
@click.option('--remember', default=False,  is_flag=True,help='remember the 1 time run in the alog, default false')
def do0(action,remember=False,changesonly=False):
    """
    call an action but don't remember the consequences
    """
    allservices=not changesonly
    j.atyourservice.do(action,remember=remember,allservices=allservices)

@click.command()
@click.option('--printonly', default=False,  is_flag=True,help='if set will not really execute, only show what would have been done')
def install(printonly=False):
    """
    make it reality
    """
    j.atyourservice.install(printonly=printonly)


@click.command()
@click.argument('role')
@click.argument('instance')
def showproducers(role,instance):
    print ("producers:")
    ays=j.atyourservice.getService(role,instance)
    ays.printProducersRecursive()

@click.command()
@click.argument('role')
@click.argument('instance')
def showparents(role,instance):
    ays=j.atyourservice.getService(role,instance)
    out="parents:\n"
    for parent in ays.parents:
        out+="- %s\n"%parent
    print (out)


@click.command()
@click.option('--role', default='')
@click.option('--instance', default='')
def list(role, instance):
    print("Installed services:")
    services = j.atyourservice.findServices(role=role, instance=instance)
    for s in sorted(services, key=lambda service: service.role):
        print("%s!%s" % (s.role, s.instance))

@click.command()
@click.option('--action', '-a', default=None)
def printlog(action):
    action_name, out = j.atyourservice.alog.getActionOuput(action)
    print("Output of last action: %s\n" % action_name)
    print(out)

@click.command()
@click.option('--token', '-t', prompt='Please enter the token for your bot', help="Telegram bot token. talk to @BotFather to get one.")
@click.option('--repo', '-r', help="Directory where to store the projects", default='/opt/code/telegram-projects')
def bot(token, repo):
    bot = j.atyourservice.telegramBot(token, start=True)


@click.command()
def destroy():
    """
    reset in current ays repo all services & recipe's
    """
    j.atyourservice.destroy()
    
@click.command()
@click.argument('debug')
def debug(debug):
    """
    put atyourservice in debug mode (option 1 or 0)
    """
    debug=0
    if debug in [1,"1",True,"true","yes","Y","y"]:
        debug=1
    j.core.db.set("atyourservice.debug",debug)
    if debug==1:
        print ("AtYourService is now in debug mode")
    else:
        print ("AtYourService is now in production mode")

cli.add_command(new)
cli.add_command(destroy)
cli.add_command(init)
cli.add_command(apply)
cli.add_command(install)
cli.add_command(do)
cli.add_command(do0)
cli.add_command(showproducers)
cli.add_command(showparents)
cli.add_command(showactions)
cli.add_command(list)
cli.add_command(printlog)
cli.add_command(bot)
cli.add_command(debug)

# print (sys.excepthook)

if __name__ == '__main__':
    cli()
    # cli(standalone_mode=False)

# j.application.stop()
# j.logger.enabled = False
