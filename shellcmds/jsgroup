#!/usr/bin/env jspython8
from JumpScale import j
from JumpScale.tools import cmdutils

j.application.start("jsgroup")

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=['add', 'delete', 'list'], help='Command to perform')
parser.add_argument("-d", '--data', help='add group as groupname:domain')
parser.add_argument("-gl", '--group', help='groupname')
parser.add_argument("-gd", '--domain', help='domain for group to list')

#parser.add_argument('--force',required=False, action='store_true',help='dont ask yes, do immediate')
#parser.add_argument('--debug',required=False, action='store_true',help='will stop on errors and show all relevant info')

opts = cmdutils.processLogin(parser)


opts = parser.parse_args()

# if opts.passwd==None:

#     if j.application.config.exists("grid.master.superadminpasswd"):
#         opts.passwd=j.application.config.get("grid.master.superadminpasswd")
#     else:
#         opts.passwd=j.tools.console.askString("please provide superadmin passwd for the grid.")

# if opts.addr==None:
#     addr=j.application.config.get("grid.master.ip")
# else:
#     addr=opts.addr

# TODO (*3*) ---> Get MongoEngine connection from AYS
j.data.models.system.connect2mongo()

# ADD
if opts.action == 'add':
    if opts.data is not None:
        splitted = opts.data.split(":")
        if len(splitted) != 2:
            raise j.exceptions.RuntimeError("error, format for param data needs to be: groupname:domain")
        name, domain = splitted
    else:
        name = j.tools.console.askString("name")
        domain = j.tools.console.askString("domain e.g. incubaid.com")

    if j.data.models.system.Group.find({'name': name}):
        raise j.exceptions.RuntimeError("group already exists")

    group = j.data.models.system.Group()
    group.name = name
    group.domain = domain

    group.save()

    print(group)


if opts.action == 'list':
    out = ""
    print("\n%-20s %-25s %s" % ("name", "domain", "users"))
    print("="*80)
    for item in j.data.models.system.Group.find({}):
        users = j.data.models.system.User.find({'groups': item['name']})
        users = [user['name'] for user in users]
        out += "%-20s %-25s %s\n" % (item["name"], item["domain"], ", ".join(users))
    out = out.split("\n")
    out.sort()
    out = "\n".join(out)
    print(out)

if opts.action == 'delete':
    if opts.group is None:
        opts.group = j.tools.console.askString("group to delete")
    group = j.data.models.system.Group.find({'name': opts.group})
    if group:
        group = group[0]
        j.data.models.system.Group.delete(group.guid)

j.application.stop()
