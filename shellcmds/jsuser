#!/usr/bin/env jspython
from JumpScale import j
from JumpScale.tools import cmdutils
import re

j.application.start("jsuser")


def _isValidUserName(username):
    r = re.compile('^[a-z0-9]{1,20}$')
    return r.match(username) is not None

parser = cmdutils.ArgumentParser()
parser.add_argument("action", choices=[
                    'add', 'set', 'delete', 'list', 'auth', 'addgroup', 'delgroup', 'passwd'], help='Command to perform')

parser.add_argument(
    "-d", '--data', help='add user as username:passwd:group1,group2:email1,email2:domain')
parser.add_argument('--hrd', help='give hrd as input for new user')

group = parser.add_argument_group(title="Authentication")
group.add_argument("-ul", '--userlogin', help='username to do check,edit')
group.add_argument("-up", '--userpasswd', help='passwd for user to check,edit')

group = parser.add_argument_group(title="List")
group.add_argument("-ud", '--domain', help='domain for user to list')

group = parser.add_argument_group(title="GroupManipulation")
group.add_argument("-gu", '--groupuser', help='user')
group.add_argument("-gg", '--groupgroup', help='group to add or remove')


#parser.add_argument('--force',required=False, action='store_true',help='dont ask yes, do immediate')
#parser.add_argument('--debug',required=False, action='store_true',help='will stop on errors and show all relevant info')

opts = cmdutils.processLogin(parser)

#clients = j.atyourservice.findServices(role='osis_client')
#if len(clients) < 1:
#    raise j.exceptions.OPERATIONS(
#        msg="can't find any osis client, please install one", category="jsuser")

#osis = j.clients.osis.getByInstance(clients[0].instance)
# TODO (*2*) --> Get config through AYS. For now, connect locally
j.data.models.system.connect2mongo()

xmpp = []
mobile = []
description = ""
authkeys = []

def getUserGUID(username):
    results = j.data.models.system.User.find({'name': username})
    if results:
        return results[0].pk
    print("Could not find user with name %s" % username)
    j.application.stop(1)

# ADD
if opts.action == 'auth':
    if opts.userlogin is None:
        opts.userlogin = j.tools.console.askString("user to check")
    if opts.userpasswd is None:
        opts.userpasswd = j.tools.console.askString("passwd for user to check")

    result = j.data.models.system.User.authenticate(username=opts.userlogin, passwd=opts.userpasswd)
    for key, val in list(result.items()):
        print("%-20s %s" % (key, val))

if opts.action == 'passwd':
    if opts.userlogin is None:
        opts.userlogin = j.tools.console.askString("user to set passwd for")
    if opts.userpasswd is None:
        opts.userpasswd = j.tools.console.askPassword("passwd")

    userguid = getUserGUID(opts.userlogin)
    user = j.data.models.system.User.get(userguid)
    user.passwd = opts.userpasswd
    user.save()

if opts.action == 'delete':
    if opts.userlogin is None:
        opts.userlogin = j.tools.console.askString("user to delete")
    if j.data.models.system.User.find({'name': opts.userlogin}) == []:
        print("user not found, no need to delete")
        j.application.stop()
    userguid = getUserGUID(opts.userlogin)

    user = j.data.models.system.User.get(userguid)
    user.delete()

if opts.action == 'add' or opts.action == 'set':
    if opts.data is not None:
        splitted = opts.data.split(":")
        if len(splitted) != 5:
            raise j.exceptions.RuntimeError(
                "error, format for param data needs to be: username:passwd:group1,group2:email1,email2:domain")
        name, passwd, groups, emails, domain = splitted
        groups = groups.split(",")
        emails = emails.split(",")
    elif opts.hrd is not None:
        hrd = j.data.hrd.get(content=opts.hrd.replace("#", "\n"))
        if hrd.exists("user.name"):
            name = hrd.get("user.name")
        if hrd.exists("user.domain"):
            domain = hrd.get("user.domain")
        if hrd.exists("user.mobile"):
            mobile = hrd.getList("user.mobile")
        if hrd.exists("user.emails"):
            emails = hrd.getList("user.emails")
        if hrd.exists("user.groups"):
            groups = hrd.getList("user.groups")
        if hrd.exists("user.roles"):
            roles = hrd.getList("user.roles")
        if hrd.exists("user.xmpp"):
            xmpp = hrd.getList("user.xmpp")
        if hrd.exists("user.passwd"):
            passwd = hrd.get("user.passwd")
        if hrd.exists("user.mobile"):
            mobile = hrd.getList("user.mobile")
        if hrd.exists("user.description"):
            description = hrd.getList("user.description")
        if hrd.exists("user.authkeys"):
            authkeys = hrd.getList("user.authkeys")
    else:
        name = opts.userlogin or j.tools.console.askString("name")
        passwd = opts.userpasswd or j.tools.console.askPassword("passwd")
        gid = j.tools.console.askInteger("gid", defaultValue=j.application.whoAmI.gid)
        domain = opts.domain or j.tools.console.askString("domain e.g. incubaid.com")

        if j.tools.console.askYesNo("do you want to define new groups."):
            groups = j.tools.console.askString("comma separated list of groups").split(",")
        else:
            groups = [item["name"] for item in j.data.models.system.Group.find({"name": gid})]
            groups = j.tools.console.askChoiceMultiple(groups, "select groups", True)

        emails = j.tools.console.askString(
            "comma separated list of emails").split(',')

    if opts.action == 'add' and j.data.models.system.User.find({'name': name}):
        j.errorconditionhandler.raiseOperationalCritical(
            message='user already exists', category="jsuser.add.exists")

    if not _isValidUserName(name):
        j.errorconditionhandler.raiseOperationalCritical(
            message='Username name may not exceed 20 characters and may only contain a-z and 0-9', category="jsuser.add.invalid")

    user = j.data.models.system.User()
    user.name = name
    user.groups = groups
    user.emails = emails
    user.domain = domain
    user.passwd = passwd
    user.mobile = mobile
    user.xmpp = xmpp
    user.description = description
    user.authkeys = authkeys

    user.save()

    for group in groups:
        g = j.data.models.system.Group.find({'name': group})
        if g:
            continue
        g = j.data.models.system.Group()
        g.name = group
        g.save()

    print(user)

if opts.action == 'addgroup' or opts.action == 'delgroup':
    if not opts.groupuser or not opts.groupgroup:
        print(
            "To manipulate a usergroup you need to provide -gu and -gg options")
        j.application.stop(1)
    userguid = getUserGUID(opts.groupuser)
    if not userguid:
        j.errorconditionhandler.raiseOperationalCritical(
            message='cannot find user:%s' % opts.user, category="jsuser.add.exists")
    user = j.data.models.system.User.get(userguid)

    if opts.action == 'delgroup':
        print("del group:%s from %s" % (opts.groupgroup, opts.groupuser))

        if opts.groupgroup in user.groups:
            user.groups.pop(user.groups.index(opts.groupgroup))

    if opts.action == 'addgroup':
        print("add group:%s from %s" % (opts.groupgroup, opts.groupuser))
        if opts.groupgroup not in user.groups:
            user.groups.append(opts.groupgroup)

    user.save()

    print(user)


if opts.action == 'list':
    out = ""
    print("\n%-20s %-25s %s" % ("name", "domain", "groups"))
    print("=" * 80)

    if opts.domain:
        users = j.data.models.system.User.find({"domain": opts.domain})
    else:
        users = j.data.models.system.User.find({})

    for item in users:
        out += "%-20s %-25s %s\n" % (item["name"], item["domain"], ",".join(item["groups"]))
    out = out.split("\n")
    out.sort()
    out = "\n".join(out)
    print(out)


j.application.stop()
